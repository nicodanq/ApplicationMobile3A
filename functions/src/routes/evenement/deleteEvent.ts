import type { Request, Response } from "express"
import { pool } from "../../utils/db"

// Fonction pour annuler un √©v√©nement (au lieu de le supprimer)
export async function annulerEvenement(req: Request, res: Response) {
  try {
    const { id } = req.params

    console.log("üö´ D√©but annulation √©v√©nement ID:", id)

    // V√©rifier que l'√©v√©nement existe
    const [existingEvent] = await pool.query("SELECT * FROM Evenement WHERE Id_Event = ?", [id])
    if ((existingEvent as any[]).length === 0) {
      return res.status(404).json({
        message: "√âv√©nement non trouv√©",
      })
    }

    const event = (existingEvent as any[])[0]
    console.log("üìã √âv√©nement trouv√©:", event)

    // V√©rifier si l'√©v√©nement n'est pas d√©j√† annul√©
    if (event.description_Event.includes("ANNUL√â")) {
      return res.status(400).json({
        message: "Cet √©v√©nement est d√©j√† annul√©",
      })
    }

    // Modifier la description pour ajouter "ANNUL√â" au d√©but
    const nouvelleDescription = `ANNUL√â - ${event.description_Event}`

    // Mettre √† jour l'√©v√©nement avec la nouvelle description
    // On garde le m√™me type d'√©v√©nement mais on va g√©rer la couleur c√¥t√© front-end
    const [updateResult] = await pool.query("UPDATE Evenement SET description_Event = ? WHERE Id_Event = ?", [
      nouvelleDescription,
      id,
    ])

    console.log("‚úÖ R√©sultat de l'annulation:", updateResult)

    // R√©cup√©rer l'√©v√©nement mis √† jour pour confirmation
    const [updatedEvent] = await pool.query("SELECT * FROM Evenement WHERE Id_Event = ?", [id])
    console.log("üìã √âv√©nement apr√®s annulation:", (updatedEvent as any[])[0])

    return res.status(200).json({
      message: "√âv√©nement annul√© avec succ√®s",
      success: true,
      data: (updatedEvent as any[])[0],
    })
  } catch (err) {
    console.error("‚ùå Erreur annulation √©v√©nement:", err)
    return res.status(500).json({
      message: "Erreur lors de l'annulation de l'√©v√©nement",
      error: process.env.NODE_ENV === "development" ? (err as Error).message : undefined,
    })
  }
}

// Fonction pour r√©activer un √©v√©nement annul√©
export async function reactiverEvenement(req: Request, res: Response) {
  try {
    const { id } = req.params

    console.log("üîÑ D√©but r√©activation √©v√©nement ID:", id)

    // V√©rifier que l'√©v√©nement existe
    const [existingEvent] = await pool.query("SELECT * FROM Evenement WHERE Id_Event = ?", [id])
    if ((existingEvent as any[]).length === 0) {
      return res.status(404).json({
        message: "√âv√©nement non trouv√©",
      })
    }

    const event = (existingEvent as any[])[0]
    console.log("üìã √âv√©nement trouv√©:", event)

    // V√©rifier si l'√©v√©nement est bien annul√©
    if (!event.description_Event.includes("ANNUL√â")) {
      return res.status(400).json({
        message: "Cet √©v√©nement n'est pas annul√©",
      })
    }

    // Retirer "ANNUL√â - " de la description
    const nouvelleDescription = event.description_Event.replace("ANNUL√â - ", "")

    // Mettre √† jour l'√©v√©nement avec la description originale
    const [updateResult] = await pool.query("UPDATE Evenement SET description_Event = ? WHERE Id_Event = ?", [
      nouvelleDescription,
      id,
    ])

    console.log("‚úÖ R√©sultat de la r√©activation:", updateResult)

    // R√©cup√©rer l'√©v√©nement mis √† jour pour confirmation
    const [updatedEvent] = await pool.query("SELECT * FROM Evenement WHERE Id_Event = ?", [id])
    console.log("üìã √âv√©nement apr√®s r√©activation:", (updatedEvent as any[])[0])

    return res.status(200).json({
      message: "√âv√©nement r√©activ√© avec succ√®s",
      success: true,
      data: (updatedEvent as any[])[0],
    })
  } catch (err) {
    console.error("‚ùå Erreur r√©activation √©v√©nement:", err)
    return res.status(500).json({
      message: "Erreur lors de la r√©activation de l'√©v√©nement",
      error: process.env.NODE_ENV === "development" ? (err as Error).message : undefined,
    })
  }
}
